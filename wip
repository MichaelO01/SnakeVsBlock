import java.awt.*;
import java.applet.Applet;
import java.awt.event.*;
import java.util.Random;
import java.util.ArrayList;

public class Final extends Applet implements Runnable, MouseListener, MouseMotionListener
{
    Thread main = new Thread(this);
    int bodyParts = 30;
    int x[] = new int[1000];
    int y[] = new int[1000];
    int blockx[] = new int[5];
    int blocky[] = new int[5];
    int addsx[] = new int[3];
    int addsy[] = new int[3];
    boolean alive = false;
    Image buffer;
    Graphics bufferg;
    Font blockValues = new Font("bold",4,40);
    int mousex;
    int speed;
    GameButton play = new GameButton(new Rectangle(120,300,160,80),"PLAY");
    Block[] blocks = new Block[5];
    Addition[] additions = new Addition[3];
    ArrayList<BodyPart> snake = new ArrayList<BodyPart>();
    GameScreen screen = new GameScreen();

    public void init()
    {
        resize(700,640);
        addMouseListener(this);
        addMouseMotionListener(this);

        bodyParts = 30;
        speed = 4;
        
        for(int n = 0; n < 200; n++)
        {
            x[n] = 190;
            y[n] = 432 + (20*n);
        }
        
        for(int p = 0; p < 5; p++)
        {
            blockx[p] = 0 + (80*p);
            blocky[p] = -80;
            blocks[p] = new Block(new Rectangle(blockx[p],blocky[p],80,80),(int)(Math.random()*(bodyParts+30)));
        }
        blocks[(int)(Math.random()*blocks.length)].setPoints(((int)(Math.random()*20)));
        
        for(int n = 0; n < 3; n++)
        {
            addsx[n] = (int)(Math.random()*380);
            addsy[n] = (int)(Math.random()*-420 - 120);
            addsy[n] = addsy[n] - (addsy[n] % speed);
            additions[n] = new Addition(new Rectangle(addsx[n],addsy[n],20,20),(int)(Math.random()*5 + 1));
        }
        
        buffer = createImage(this.getWidth(), this.getHeight());
        bufferg = buffer.getGraphics();
        main.start();
    }

    public void move()
    {
        for(int z = bodyParts - 1; z > 0; z--)
        {
            if(Math.abs(x[z]-x[z-1]) == 1)
                x[z] = x[z-1];
            if(x[z-1] < x[z] && !(new BodyPart(new Rectangle(x[z]-5,y[z],20,20)).collides(blocks)))
                x[z] -= (int)((x[z]-x[z-1])/1.5);
            if(x[z-1] > x[z] && !(new BodyPart(new Rectangle(x[z]+5,y[z],20,20)).collides(blocks)))
                x[z] += (int)((x[z-1]-x[z])/1.5);
        }
        repaint();
    }

    public void run()
    {
        while(true)
        {
            try{main.sleep(35);} catch(Exception e) {}

            if(alive)
            {
                play.setMessage("RESTART");
                boolean broken = false;
                //ArrayList<Rectangle> snake = new ArrayList<Rectangle>();
                BodyPart head = new BodyPart(new Rectangle(x[0],y[0],20,20));

                for(int n = 1; n < bodyParts; n++)
                    snake.add(new BodyPart(new Rectangle(x[n],y[n],20,20)));
                    
                for(int n = 0; n < 5; n++)
                    blocks[n] = new Block(new Rectangle(blockx[n],blocky[n],80,80),blocks[n].getPoints());
                    
                for(int n = 0; n < 3; n++)
                {
                    additions[n] =  new Addition(new Rectangle(addsx[n],addsy[n],20,20),additions[n].getPoints());
                    if(additions[n].collides(blocks))
                    {
                        addsx[n] = (int)(Math.random()*380);
                        addsy[n] = (int)(Math.random()*-80 - 280);
                    }
                }
                
                move();
                
                for(int p = 0; p < 5 && !broken; p++)
                {
                    int old = blocks[p].getPoints();
                    if(y[0] == blocky[0] + 80 && x[0] >= blockx[p] && x[0] <= blockx[p] + 80 && blocks[p].getPoints() > 0)
                    {
                        broken = false;
                        blocks[p].decrease();
                        bodyParts--;
                        screen.increaseScore();
                        if(screen.getScore() % 50 == 0 && speed < 15)
                        {
                            speed += 4;
                        }
                    }
                    if(blocks[p].getPoints() == 0 && x[0] >= blockx[p] && x[0] <= blockx[p] + 80)
                    {
                        broken = true;
                    }
                }
                
                if(y[0] != blocky[0] + 80 || broken)
                {
                    for(int n = 0; n < 5; n++)
                        blocky[n] += speed;
                    for(int n = 0; n < 3; n ++)
                        addsy[n] += speed;
                }
                
                 if(blocky[0] > 640)
                {
                    for(int n = 0; n < blocks.length; n++)
                    {
                        blocky[n] = -80;
                        blocks[n] = new Block(new Rectangle(blockx[n],blocky[n],80,80),(int)(Math.random()*(bodyParts+30)));
                    }
                    blocks[(int)(Math.random()*blocks.length)].setPoints(((int)(Math.random()*20)));
                }
                
                for(int n = 0; n < 3; n++)
                {
                    if(head.getRect().intersects(additions[n].getRect()) || addsy[n] > 640)
                    {
                        bodyParts += additions[n].getPoints();
                        addsx[n] = (int)(Math.random()*380);
                        addsy[n] = (int)(Math.random()*-80 - 280);
                        addsy[n] = addsy[n] - (addsy[n] % speed);
                        additions[n].setPoints((int)(Math.random()*5 + 1));
                    }
                }
                
                if(bodyParts == 0)
                    alive = false;
                repaint();
            }
            repaint();
        }
    }

    public void mouseClicked(MouseEvent e)
    {
        if(!alive)
        {
            mousex = e.getX();
            int mousey = e.getY();
            if(new Rectangle(mousex,mousey,1,1).intersects(play.getRect()))
                alive = true;
            if(play.getMessage().equals("RESTART"))
            {
                init();
                alive = true;
            }
        }
        repaint();
    }

    public void mousePressed(MouseEvent e){}

    public void mouseReleased(MouseEvent e){}

    public void mouseEntered(MouseEvent e){}

    public void mouseExited(MouseEvent e){}

    public void mouseDragged(MouseEvent e){}

    public void mouseMoved(MouseEvent e)
    {
        if(e.getX() < 380 && !new BodyPart(new Rectangle(e.getX(),y[0],20,20)).collides(blocks) && alive)
        {
            mousex = e.getX();
            x[0] = mousex;
        }
        repaint();
    }

    public void paint(Graphics g)
    {
        screen.drawScreen(bufferg);
        bufferg.setColor(Color.red);
        bufferg.setFont(blockValues);
        bufferg.drawString("Parts: " + bodyParts,450,360);
        bufferg.drawString("addsy: " + addsy[0],450,420);
        bufferg.drawString("speed: " + speed, 450,480);
        for(int n = 0; n < 3; n++)  
            additions[n].draw(bufferg);

        for(int n = 0; n < bodyParts; n++)
        {
            bufferg.setColor(Color.yellow);
            bufferg.fillOval(x[n],y[n],20,20);
            bufferg.setColor(Color.black);
            bufferg.drawOval(x[n],y[n],20,20);
        }
        
       
        for(int p = 0; p < 5; p++)
            blocks[p].draw(bufferg,blockValues);
        if(!alive)
        {
            play.draw(bufferg,Color.lightGray,Color.red,new Font("bold",1,30));
        }
        //screen.drawRules(bufferg);

        g.drawImage(buffer,0,0,this);
    }

    public void update(Graphics g)
    {
        paint(g);
    }
}
