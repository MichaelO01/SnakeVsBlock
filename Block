import java.awt.*;

public class Block
{
    private Rectangle rect;
    private int length;
    private int height;
    private int points;

    public Block(Rectangle inRect, int inPoints)
    {
        setRect(inRect);
        setPoints(inPoints);
    }

    public String toString()
    {
        return "Points: " + getPoints() + "Position: (" + rect.x + "," + rect.y + ")";
    }

    public void setLen(int inL)
    {
        length = inL;
    }

    public int getLen()
    {
        return length;
    }

    public void setHt(int inH)
    {
        height = inH;
    }

    public int getHt()
    {
        return height;
    }

    public void setRect(Rectangle inR)
    {
        rect = inR;
    }

    public Rectangle getRect()
    {
        return rect;
    }

    public void setPoints(int inP)
    {
        points = inP;
    }

    public int getPoints()
    {
        return points;
    }

    public void decrease()
    {
        points--;
    }

    public void setX(int inX)
    {
        rect = new Rectangle(inX,rect.y,rect.width,rect.height);
    }

    public int getX()
    {
        return rect.x;
    }

    public void setY(int inY)
    {
        rect = new Rectangle(rect.x,inY,rect.width,rect.height);
    }

    public int getY()
    {
        return rect.y;
    }

    public void changeY(int n)
    {
        setY(rect.y + n);
    }

    public boolean collides(Block [] b)
    {
        boolean hit = false;
        for(int n = 0; n < b.length; n++)
            if(getRect().intersects(b[n].getRect()) && b[n].getPoints() > 0)
                hit = true;
        return hit;
    }

    public void drawCenteredString(Graphics g, String text, Rectangle r, Font font)
    {
        FontMetrics metrics = g.getFontMetrics(font);
        int x = r.x + (r.width - metrics.stringWidth(text)) / 2;
        int y = r.y + ((r.height - metrics.getHeight()) / 2) + metrics.getAscent();
        g.setFont(font);
        g.drawString(text, x, y);
    }

    public void draw(Graphics g, Font f)
    {
        Color[] colors = new Color[] {Color.cyan,Color.green,Color.yellow,Color.orange,Color.red,Color.magenta};
        int c = 0;
        c += getPoints() / 10;
        g.setColor(colors[c]);
        if(getPoints() > 0)
        {
            g.fillRect(rect.x,rect.y,80,80);
            g.setColor(Color.black);
            g.drawRect(rect.x,rect.y,80,80);
            drawCenteredString(g,getPoints() + "", getRect(),f);
        }
    }
}
